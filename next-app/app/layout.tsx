import type { Metadata } from 'next';
import BaseThemeProvider from '@themes/BaseTheme';
import Header from '@components/Header';
import Footer from '@components/Footer';
import { Suspense } from 'react';
import { tContentImg1, tLink } from '@ctypes/index';
import { tCompany, tContactFormItem, tMedia } from '@ctypes/map';
import { CommonDataProvider } from '@contexts/Common';
import { Box, Grid2 as Grid } from '@mui/material';
import './globals.css';

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="ja">
      <body>
        <Suspense fallback={<div>Loading...</div>}>
          <CommonDataProvider
            domain={domain}
            imgTenpo={imgTenpo}
            contactFormItems={contactFormItems}
            menus={pages}
            catchcopy={null}
            contents={contents}
            sns={snsLinks}
          >
            <BaseThemeProvider>
              <Body>{children}</Body>
            </BaseThemeProvider>
          </CommonDataProvider>
        </Suspense>
      </body>
    </html>
  );
}

const Body = ({ children }: { children: React.ReactNode }) => {
  return (
    <Grid
      container
      spacing={0}
      sx={{ height: '100vh' }}
      overflow={{ xs: 'auto', md: 'hidden' }}
    >
      {/* === PC: 3列 (Header / Main / Footer) === */}
      {/* === タブレット: 2列 ([Header] / [Main + Footer]) === */}
      {/* === スマホ: 1列 (Header 固定 + Main + Footer) === */}

      <Grid
        container
        size={{ xs: 12 }}
        sx={{
          flexGrow: 1,
          display: 'flex',
          flexDirection: { xs: 'column', md: 'row', lg: 'row' },
        }}
        justifyContent={{ xs: 'center', md: 'space-evenly' }}
        alignItems={{ xs: 'center', md: 'stretch', lg: 'stretch' }}
        overflow={{ xs: 'auto', md: 'hidden' }}
        height={{ xs: 'unset', md: '100vh', lg: '100vh' }}
      >
        {/* Header (PCでは 3/12, タブレットでは 4/12, スマホでは横幅100%) */}
        <Grid
          component={'header'}
          size={{ xs: 12, md: 4, lg: 4 }}
          sx={{
            //bgcolor: 'primary.main',
            //color: 'white',
            //p: 2,
            //minHeight: '100%',
            position: { xs: 'sticky', md: 'relative', lg: 'relative' }, // スマホでは固定
            top: 0,
            zIndex: 1000,
          }}
          overflow={{ xs: 'hidden', md: 'auto' }} // はみ出たらスクロール
          height={{ xs: '60px', md: '100%', lg: '100%' }}
        >
          <Header sns={snsLinks} />
        </Grid>

        {/* Main + Footer のラップ (タブレット・スマホでは1つのスクロール領域にする) */}
        <Box
          sx={{
            display: 'flex',
            flexDirection: { xs: 'column', md: 'column', xl: 'row' },
            flexGrow: 1,
            overflowY: { xs: 'unset', sm: 'auto', xl: 'hidden' }, // PCでは各列スクロール, タブレット・スマホではまとめてスクロール
            marginTop: { xs: '0', md: 0, lg: 0 }, // スマホで Header がかぶらないように
            height: { xs: 'unset', md: '100%' },
            alignItems: { xs: 'center', md: 'center', xl: 'stretch' },
            width: { xs: '100%', md: 'unset' },
            maxWidth: { xs: '900px', xl: '100%' },
          }}
        >
          {/* Main */}
          <Grid
            size={{ xs: 12, md: 12, xl: 6 }}
            sx={{
              width: '100%',
              maxWidth: '900px',
              //p: 2,
              //minHeight: '100%',
              overflowY: { xs: 'unset', xl: 'auto' }, // PCでは各列スクロール, タブレット・スマホではまとめてスクロール
            }}
            component="main"
          >
            {children}
          </Grid>

          {/* Footer */}
          <Grid
            size={{ xs: 12, md: 12, xl: 6 }}
            sx={{
              bgcolor: 'grey.800',
              color: 'white',
              p: 2,
              overflowY: { xs: 'unset', xl: 'auto' }, // PCでは各列スクロール, タブレット・スマホではまとめてスクロール
            }}
          >
            <Footer companyInfo={domain} imgTenpo={imgTenpo} />
          </Grid>
        </Box>
      </Grid>
    </Grid>
  );
};

// Contextで読み込む予定の仮データ
const domain: tCompany = {
  number: '1234567890',
  domain: 'example.com',
  organization_name: 'My Awesome Website',
  ceo_name: 'John Doe',
  ceo_post_name: 'CEO',
  tell: '012-3456-7890',
  fax: '012-3456-7890',
  postal_code: '123-4567',
  address: 'Tokyo',
  address_other: 'Shibuya',
  email: '',
  google_map: '',
  google_map_link: '',
  google_tm_script: '',
  google_tm_script_body: '',
  caption: 'Explore the amazing content on my website.',
};

const snsLinks: tLink[] = [
  {
    name: 'Facebook',
    url: 'https://line.com',
    icon: {
      url: '/ttnou/tmp/logo_facebook_white.png',
      file: 'logo_facebook_white.png',
      name: 'facebook',
      caption: 'facebook',
      uuid: 'jsladjlsadsfd',
    },
  },
  {
    name: 'Instagram',
    url: 'https://www.instagram.com',
    icon: {
      url: '/img/sns/logo_instagram_white.png',
      file: 'logo_instagram_white.png',
      name: 'instagram',
      caption: 'Instagram',
      uuid: 'dhsalfjdlskajfld;',
    },
  },
];

export const contents: tContentImg1[] = [
  {
    uuid: 'highlight1',
    title: '',
    catchcopy: 'Service',
    description:
      '担当ディレクター・デイナーが一貫してサポート。当社にいわゆる「営業マン」はいません。ディレクター・デザイナー・システムエンジニアが直接やりとりを行うため、客様のイメージや考えをしっかりと共有でき、スピーディでスムーズな進行を叶えます。',
    tags: [],
    img1: {
      url: '/tmp/tranp.gif',
      name: 'service visual',
      caption: '',
      file: 'tranp.gif',
      uuid: 'service-visual',
    },
    img2: null,
    label: '詳しく見る',
    href: '/service',
  },
  {
    uuid: 'highlight2',
    title: 'addonemにできること',
    catchcopy: 'ABILITY',
    description:
      '<li>デザイン</li><li>システム開発</li><li>マーケティング</li>',
    tags: [],
    img1: {
      url: '/tmp/all_ability.png',
      name: 'ability',
      caption: '',
      file: 'ability.jpg',
      uuid: 'ability',
    },
    img2: null,
    label: '実績はこちら',
    href: '/ability',
  },
];

export const pages: tLink[] = [
  { name: 'Home', url: '/', icon: null },
  { name: 'Service', url: '/service', icon: null },
  { name: 'Ability', url: '/ability', icon: null },
  { name: 'Contact', url: '/contact', icon: null },
];

export const contactFormItems: tContactFormItem[] = [
  {
    label: '会社・店名',
    name: 'company',
    type: 'text',
    required: true,
    placeholder: '',
  },
  {
    label: '名前',
    name: 'name',
    type: 'text',
    required: true,
    placeholder: '',
  },
  {
    label: '電話番号',
    name: 'tell',
    type: 'text',
    required: false,
    placeholder: '',
  },
  {
    label: 'メールアドレス',
    name: 'email',
    type: 'email',
    required: true,
    placeholder: 'Your Email',
  },
  {
    label: '住所',
    name: 'address',
    type: 'text',
    required: true,
    placeholder: '',
  },
  {
    label: '本文',
    name: 'message',
    type: 'textarea',
    required: true,
    placeholder: 'Your Message',
    row: 4,
  },
];

const imgTenpo: tMedia[] = [
  {
    url: '/ttnou/tmp/image_tenpo.jpg',
    file: 'image_tenpo.jpg',
    name: 'image_tenpo',
    caption: 'image_tenpo',
    uuid: 'dhakhdwljj',
  },
];
